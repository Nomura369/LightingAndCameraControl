// CTeapot.cpp
#include <glew/include/GL/glew.h>
#include <glm/gtc/type_ptr.hpp>
#include "CTeapot.h"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

// --- 1. Bezier basis 函式（Bernstein 多項式及其導數） ---
static float B(int i, float t) {
    switch (i) {
    case 0: return (1 - t) * (1 - t) * (1 - t);
    case 1: return 3 * (1 - t) * (1 - t) * t;
    case 2: return 3 * (1 - t) * t * t;
    case 3: return t * t * t;
    default: return 0.0f;
    }
}
static float dB(int i, float t) {
    switch (i) {
    case 0: return -3 * (1 - t) * (1 - t);
    case 1: return 3 * (1 - t) * (1 - t) - 6 * (1 - t) * t;
    case 2: return 6 * (1 - t) * t - 3 * t * t;
    case 3: return 3 * t * t;
    default: return 0.0f;
    }
}

// --- 2. 靜態資料：請從 freeglut 的 fg_teapot_data.h 複製過來 :contentReference[oaicite:0]{index=0} ---
const GLushort CTeapot::teapotPatches[32][4][4] = {
    { {0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10, 11}, {12, 13, 14, 15} },
    { {3, 16, 17, 18}, {7, 19, 20, 21}, {11, 22, 23, 24}, {15, 25, 26, 27} },
    { {18, 28, 29, 30}, {21, 31, 32, 33}, {24, 34, 35, 36}, {27, 37, 38, 39} },
    { {30, 40, 41, 0}, {33, 42, 43, 4}, {36, 44, 45, 8}, {39, 46, 47, 12} },
    { {12, 13, 14, 15}, {48, 49, 50, 51}, {52, 53, 54, 55}, {56, 57, 58, 59} },
    { {15, 25, 26, 27}, {51, 60, 61, 62}, {55, 63, 64, 65}, {59, 66, 67, 68} },
    { {27, 37, 38, 39}, {62, 69, 70, 71}, {65, 72, 73, 74}, {68, 75, 76, 77} },
    { {39, 46, 47, 12}, {71, 78, 79, 48}, {74, 80, 81, 52}, {77, 82, 83, 56} },
    { {56, 57, 58, 59}, {84, 85, 86, 87}, {88, 89, 90, 91}, {92, 93, 94, 95} },
    { {59, 66, 67, 68}, {87, 96, 97, 98}, {91, 99, 100, 101}, {95, 102, 103, 104} },
    { {68, 75, 76, 77}, {98, 105, 106, 107}, {101, 108, 109, 110}, {104, 111, 112, 113} },
    { {77, 82, 83, 56}, {107, 114, 115, 84}, {110, 116, 117, 88}, {113, 118, 119, 92} },
    { {120, 121, 122, 123}, {124, 125, 126, 127}, {128, 129, 130, 131}, {132, 133, 134, 135} },
    { {123, 136, 137, 120}, {127, 138, 139, 124}, {131, 140, 141, 128}, {135, 142, 143, 132} },
    { {132, 133, 134, 135}, {144, 145, 146, 147}, {148, 149, 150, 151}, {68, 152, 153, 154} },
    { {135, 142, 143, 132}, {147, 155, 156, 144}, {151, 157, 158, 148}, {154, 159, 160, 68} },
    { {161, 162, 163, 164}, {165, 166, 167, 168}, {169, 170, 171, 172}, {173, 174, 175, 176} },
    { {164, 177, 178, 161}, {168, 179, 180, 165}, {172, 181, 182, 169}, {176, 183, 184, 173} },
    { {173, 174, 175, 176}, {185, 186, 187, 188}, {189, 190, 191, 192}, {193, 194, 195, 196} },
    { {176, 183, 184, 173}, {188, 197, 198, 185}, {192, 199, 200, 189}, {196, 201, 202, 193} },
    { {203, 203, 203, 203}, {206, 207, 208, 209}, {210, 210, 210, 210}, {211, 212, 213, 214} },
    { {203, 203, 203, 203}, {209, 216, 217, 218}, {210, 210, 210, 210}, {214, 219, 220, 221} },
    { {203, 203, 203, 203}, {218, 223, 224, 225}, {210, 210, 210, 210}, {221, 226, 227, 228} },
    { {203, 203, 203, 203}, {225, 229, 230, 206}, {210, 210, 210, 210}, {228, 231, 232, 211} },
    { {211, 212, 213, 214}, {233, 234, 235, 236}, {237, 238, 239, 240}, {241, 242, 243, 244} },
    { {214, 219, 220, 221}, {236, 245, 246, 247}, {240, 248, 249, 250}, {244, 251, 252, 253} },
    { {221, 226, 227, 228}, {247, 254, 255, 256}, {250, 257, 258, 259}, {253, 260, 261, 262} },
    { {228, 231, 232, 211}, {256, 263, 264, 233}, {259, 265, 266, 237}, {262, 267, 268, 241} },
    { {269, 269, 269, 269}, {278, 279, 280, 281}, {274, 275, 276, 277}, {270, 271, 272, 273} },
    { {269, 269, 269, 269}, {281, 288, 289, 290}, {277, 285, 286, 287}, {273, 282, 283, 284} },
    { {269, 269, 269, 269}, {290, 297, 298, 299}, {287, 294, 295, 296}, {284, 291, 292, 293} },
    { {269, 269, 269, 269}, {299, 304, 305, 278}, {296, 302, 303, 274}, {293, 300, 301, 270} }
    // ... 共 32 個 patch ...
};
const GLfloat CTeapot::teapotVertices[306][3] = {
	{ 1.4000,  0.0000,  2.4000}, { 1.4000, -0.7840,  2.4000}, { 0.7840, -1.4000,  2.4000}, { 0.0000, -1.4000,  2.4000},
	{ 1.3375,  0.0000,  2.5312}, { 1.3375, -0.7490,  2.5312}, { 0.7490, -1.3375,  2.5312}, { 0.0000, -1.3375,  2.5312},
	{ 1.4375,  0.0000,  2.5312}, { 1.4375, -0.8050,  2.5312}, { 0.8050, -1.4375,  2.5312}, { 0.0000, -1.4375,  2.5312},
	{ 1.5000,  0.0000,  2.4000}, { 1.5000, -0.8400,  2.4000}, { 0.8400, -1.5000,  2.4000}, { 0.0000, -1.5000,  2.4000},
	{-0.7840, -1.4000,  2.4000}, {-1.4000, -0.7840,  2.4000}, {-1.4000,  0.0000,  2.4000}, {-0.7490, -1.3375,  2.5312},
	{-1.3375, -0.7490,  2.5312}, {-1.3375,  0.0000,  2.5312}, {-0.8050, -1.4375,  2.5312}, {-1.4375, -0.8050,  2.5312},
	{-1.4375,  0.0000,  2.5312}, {-0.8400, -1.5000,  2.4000}, {-1.5000, -0.8400,  2.4000}, {-1.5000,  0.0000,  2.4000},
	{-1.4000,  0.7840,  2.4000}, {-0.7840,  1.4000,  2.4000}, { 0.0000,  1.4000,  2.4000}, {-1.3375,  0.7490,  2.5312},
	{-0.7490,  1.3375,  2.5312}, { 0.0000,  1.3375,  2.5312}, {-1.4375,  0.8050,  2.5312}, {-0.8050,  1.4375,  2.5312},
	{ 0.0000,  1.4375,  2.5312}, {-1.5000,  0.8400,  2.4000}, {-0.8400,  1.5000,  2.4000}, { 0.0000,  1.5000,  2.4000},
	{ 0.7840,  1.4000,  2.4000}, { 1.4000,  0.7840,  2.4000}, { 0.7490,  1.3375,  2.5312}, { 1.3375,  0.7490,  2.5312},
	{ 0.8050,  1.4375,  2.5312}, { 1.4375,  0.8050,  2.5312}, { 0.8400,  1.5000,  2.4000}, { 1.5000,  0.8400,  2.4000},
	{ 1.7500,  0.0000,  1.8750}, { 1.7500, -0.9800,  1.8750}, { 0.9800, -1.7500,  1.8750}, { 0.0000, -1.7500,  1.8750},
	{ 2.0000,  0.0000,  1.3500}, { 2.0000, -1.1200,  1.3500}, { 1.1200, -2.0000,  1.3500}, { 0.0000, -2.0000,  1.3500},
	{ 2.0000,  0.0000,  0.9000}, { 2.0000, -1.1200,  0.9000}, { 1.1200, -2.0000,  0.9000}, { 0.0000, -2.0000,  0.9000},
	{-0.9800, -1.7500,  1.8750}, {-1.7500, -0.9800,  1.8750}, {-1.7500,  0.0000,  1.8750}, {-1.1200, -2.0000,  1.3500},
	{-2.0000, -1.1200,  1.3500}, {-2.0000,  0.0000,  1.3500}, {-1.1200, -2.0000,  0.9000}, {-2.0000, -1.1200,  0.9000},
	{-2.0000,  0.0000,  0.9000}, {-1.7500,  0.9800,  1.8750}, {-0.9800,  1.7500,  1.8750}, { 0.0000,  1.7500,  1.8750},
	{-2.0000,  1.1200,  1.3500}, {-1.1200,  2.0000,  1.3500}, { 0.0000,  2.0000,  1.3500}, {-2.0000,  1.1200,  0.9000},
	{-1.1200,  2.0000,  0.9000}, { 0.0000,  2.0000,  0.9000}, { 0.9800,  1.7500,  1.8750}, { 1.7500,  0.9800,  1.8750},
	{ 1.1200,  2.0000,  1.3500}, { 2.0000,  1.1200,  1.3500}, { 1.1200,  2.0000,  0.9000}, { 2.0000,  1.1200,  0.9000},
	{ 2.0000,  0.0000,  0.4500}, { 2.0000, -1.1200,  0.4500}, { 1.1200, -2.0000,  0.4500}, { 0.0000, -2.0000,  0.4500},
	{ 1.5000,  0.0000,  0.2250}, { 1.5000, -0.8400,  0.2250}, { 0.8400, -1.5000,  0.2250}, { 0.0000, -1.5000,  0.2250},
	{ 1.5000,  0.0000,  0.1500}, { 1.5000, -0.8400,  0.1500}, { 0.8400, -1.5000,  0.1500}, { 0.0000, -1.5000,  0.1500},
	{-1.1200, -2.0000,  0.4500}, {-2.0000, -1.1200,  0.4500}, {-2.0000,  0.0000,  0.4500}, {-0.8400, -1.5000,  0.2250},
	{-1.5000, -0.8400,  0.2250}, {-1.5000,  0.0000,  0.2250}, {-0.8400, -1.5000,  0.1500}, {-1.5000, -0.8400,  0.1500},
	{-1.5000,  0.0000,  0.1500}, {-2.0000,  1.1200,  0.4500}, {-1.1200,  2.0000,  0.4500}, { 0.0000,  2.0000,  0.4500},
	{-1.5000,  0.8400,  0.2250}, {-0.8400,  1.5000,  0.2250}, { 0.0000,  1.5000,  0.2250}, {-1.5000,  0.8400,  0.1500},
	{-0.8400,  1.5000,  0.1500}, { 0.0000,  1.5000,  0.1500}, { 1.1200,  2.0000,  0.4500}, { 2.0000,  1.1200,  0.4500},
	{ 0.8400,  1.5000,  0.2250}, { 1.5000,  0.8400,  0.2250}, { 0.8400,  1.5000,  0.1500}, { 1.5000,  0.8400,  0.1500},
	{-1.6000,  0.0000,  2.0250}, {-1.6000, -0.3000,  2.0250}, {-1.5000, -0.3000,  2.2500}, {-1.5000,  0.0000,  2.2500},
	{-2.3000,  0.0000,  2.0250}, {-2.3000, -0.3000,  2.0250}, {-2.5000, -0.3000,  2.2500}, {-2.5000,  0.0000,  2.2500},
	{-2.7000,  0.0000,  2.0250}, {-2.7000, -0.3000,  2.0250}, {-3.0000, -0.3000,  2.2500}, {-3.0000,  0.0000,  2.2500},
	{-2.7000,  0.0000,  1.8000}, {-2.7000, -0.3000,  1.8000}, {-3.0000, -0.3000,  1.8000}, {-3.0000,  0.0000,  1.8000},
	{-1.5000,  0.3000,  2.2500}, {-1.6000,  0.3000,  2.0250}, {-2.5000,  0.3000,  2.2500}, {-2.3000,  0.3000,  2.0250},
	{-3.0000,  0.3000,  2.2500}, {-2.7000,  0.3000,  2.0250}, {-3.0000,  0.3000,  1.8000}, {-2.7000,  0.3000,  1.8000},
	{-2.7000,  0.0000,  1.5750}, {-2.7000, -0.3000,  1.5750}, {-3.0000, -0.3000,  1.3500}, {-3.0000,  0.0000,  1.3500},
	{-2.5000,  0.0000,  1.1250}, {-2.5000, -0.3000,  1.1250}, {-2.6500, -0.3000,  0.9375}, {-2.6500,  0.0000,  0.9375},
	{-2.0000, -0.3000,  0.9000}, {-1.9000, -0.3000,  0.6000}, {-1.9000,  0.0000,  0.6000}, {-3.0000,  0.3000,  1.3500},
	{-2.7000,  0.3000,  1.5750}, {-2.6500,  0.3000,  0.9375}, {-2.5000,  0.3000,  1.1250}, {-1.9000,  0.3000,  0.6000},
	{-2.0000,  0.3000,  0.9000}, { 1.7000,  0.0000,  1.4250}, { 1.7000, -0.6600,  1.4250}, { 1.7000, -0.6600,  0.6000},
	{ 1.7000,  0.0000,  0.6000}, { 2.6000,  0.0000,  1.4250}, { 2.6000, -0.6600,  1.4250}, { 3.1000, -0.6600,  0.8250},
	{ 3.1000,  0.0000,  0.8250}, { 2.3000,  0.0000,  2.1000}, { 2.3000, -0.2500,  2.1000}, { 2.4000, -0.2500,  2.0250},
	{ 2.4000,  0.0000,  2.0250}, { 2.7000,  0.0000,  2.4000}, { 2.7000, -0.2500,  2.4000}, { 3.3000, -0.2500,  2.4000},
	{ 3.3000,  0.0000,  2.4000}, { 1.7000,  0.6600,  0.6000}, { 1.7000,  0.6600,  1.4250}, { 3.1000,  0.6600,  0.8250},
	{ 2.6000,  0.6600,  1.4250}, { 2.4000,  0.2500,  2.0250}, { 2.3000,  0.2500,  2.1000}, { 3.3000,  0.2500,  2.4000},
	{ 2.7000,  0.2500,  2.4000}, { 2.8000,  0.0000,  2.4750}, { 2.8000, -0.2500,  2.4750}, { 3.5250, -0.2500,  2.4938},
	{ 3.5250,  0.0000,  2.4938}, { 2.9000,  0.0000,  2.4750}, { 2.9000, -0.1500,  2.4750}, { 3.4500, -0.1500,  2.5125},
	{ 3.4500,  0.0000,  2.5125}, { 2.8000,  0.0000,  2.4000}, { 2.8000, -0.1500,  2.4000}, { 3.2000, -0.1500,  2.4000},
	{ 3.2000,  0.0000,  2.4000}, { 3.5250,  0.2500,  2.4938}, { 2.8000,  0.2500,  2.4750}, { 3.4500,  0.1500,  2.5125},
	{ 2.9000,  0.1500,  2.4750}, { 3.2000,  0.1500,  2.4000}, { 2.8000,  0.1500,  2.4000}, { 0.0000,  0.0000,  3.1500},
	{ 0.0000, -0.0020,  3.1500}, { 0.0020,  0.0000,  3.1500}, { 0.8000,  0.0000,  3.1500}, { 0.8000, -0.4500,  3.1500},
	{ 0.4500, -0.8000,  3.1500}, { 0.0000, -0.8000,  3.1500}, { 0.0000,  0.0000,  2.8500}, { 0.2000,  0.0000,  2.7000},
	{ 0.2000, -0.1120,  2.7000}, { 0.1120, -0.2000,  2.7000}, { 0.0000, -0.2000,  2.7000}, {-0.0020,  0.0000,  3.1500},
	{-0.4500, -0.8000,  3.1500}, {-0.8000, -0.4500,  3.1500}, {-0.8000,  0.0000,  3.1500}, {-0.1120, -0.2000,  2.7000},
	{-0.2000, -0.1120,  2.7000}, {-0.2000,  0.0000,  2.7000}, { 0.0000,  0.0020,  3.1500}, {-0.8000,  0.4500,  3.1500},
	{-0.4500,  0.8000,  3.1500}, { 0.0000,  0.8000,  3.1500}, {-0.2000,  0.1120,  2.7000}, {-0.1120,  0.2000,  2.7000}, 
	{ 0.0000,  0.2000,  2.7000}, { 0.4500,  0.8000,  3.1500}, { 0.8000,  0.4500,  3.1500}, { 0.1120,  0.2000,  2.7000},
	{ 0.2000,  0.1120,  2.7000}, { 0.4000,  0.0000,  2.5500}, { 0.4000, -0.2240,  2.5500}, { 0.2240, -0.4000,  2.5500},
	{ 0.0000, -0.4000,  2.5500}, { 1.3000,  0.0000,  2.5500}, { 1.3000, -0.7280,  2.5500}, { 0.7280, -1.3000,  2.5500},
	{ 0.0000, -1.3000,  2.5500}, { 1.3000,  0.0000,  2.4000}, { 1.3000, -0.7280,  2.4000}, { 0.7280, -1.3000,  2.4000},
	{ 0.0000, -1.3000,  2.4000}, {-0.2240, -0.4000,  2.5500}, {-0.4000, -0.2240,  2.5500}, {-0.4000,  0.0000,  2.5500},
	{-0.7280, -1.3000,  2.5500}, {-1.3000, -0.7280,  2.5500}, {-1.3000,  0.0000,  2.5500}, {-0.7280, -1.3000,  2.4000},
	{-1.3000, -0.7280,  2.4000}, {-1.3000,  0.0000,  2.4000}, {-0.4000,  0.2240,  2.5500}, {-0.2240,  0.4000,  2.5500},
	{ 0.0000,  0.4000,  2.5500}, {-1.3000,  0.7280,  2.5500}, {-0.7280,  1.3000,  2.5500}, { 0.0000,  1.3000,  2.5500},
	{-1.3000,  0.7280,  2.4000}, {-0.7280,  1.3000,  2.4000}, { 0.0000,  1.3000,  2.4000}, { 0.2240,  0.4000,  2.5500},
	{ 0.4000,  0.2240,  2.5500}, { 0.7280,  1.3000,  2.5500}, { 1.3000,  0.7280,  2.5500}, { 0.7280,  1.3000,  2.4000},
	{ 1.3000,  0.7280,  2.4000}, { 0.0000,  0.0000,  0.0000}, { 1.5000,  0.0000,  0.1500}, { 1.5000,  0.8400,  0.1500},
	{ 0.8400,  1.5000,  0.1500}, { 0.0000,  1.5000,  0.1500}, { 1.5000,  0.0000,  0.0750}, { 1.5000,  0.8400,  0.0750},
	{ 0.8400,  1.5000,  0.0750}, { 0.0000,  1.5000,  0.0750}, { 1.4250,  0.0000,  0.0000}, { 1.4250,  0.7980,  0.0000},
	{ 0.7980,  1.4250,  0.0000}, { 0.0000,  1.4250,  0.0000}, {-0.8400,  1.5000,  0.1500}, {-1.5000,  0.8400,  0.1500},
	{-1.5000,  0.0000,  0.1500}, {-0.8400,  1.5000,  0.0750}, {-1.5000,  0.8400,  0.0750}, {-1.5000,  0.0000,  0.0750},
	{-0.7980,  1.4250,  0.0000}, {-1.4250,  0.7980,  0.0000}, {-1.4250,  0.0000,  0.0000}, {-1.5000, -0.8400,  0.1500},
	{-0.8400, -1.5000,  0.1500}, { 0.0000, -1.5000,  0.1500}, {-1.5000, -0.8400,  0.0750}, {-0.8400, -1.5000,  0.0750},
	{ 0.0000, -1.5000,  0.0750}, {-1.4250, -0.7980,  0.0000}, {-0.7980, -1.4250,  0.0000}, { 0.0000, -1.4250,  0.0000},
	{ 0.8400, -1.5000,  0.1500}, { 1.5000, -0.8400,  0.1500}, { 0.8400, -1.5000,  0.0750}, { 1.5000, -0.8400,  0.0750},
	{ 0.7980, -1.4250,  0.0000}, { 1.4250, -0.7980,  0.0000}
};

// --- 3. 建構／解構子，以及 Draw 系列函式 ---
CTeapot::CTeapot(GLuint resolution, GLuint pattern) : CShape() {
    generateTeapot(resolution, pattern);
}

CTeapot::~CTeapot() {
    glDeleteBuffers(1, &_vbo);
    glDeleteBuffers(1, &_ebo);
    glDeleteVertexArrays(1, &_vao);
    if (_points) delete[] _points;
    if (_idx)    delete[] _idx;
}

void CTeapot::draw() {
    glUseProgram(_shaderProg);
    updateMatrix();
    glBindVertexArray(_vao);
    glUniform1i(_shadingModeLoc, _uShadingMode);
    if (_bObjColor) glUniform4fv(_colorLoc, 1, glm::value_ptr(_color));
    glDrawElements(GL_TRIANGLES, _idxCount, GL_UNSIGNED_INT, 0);
    glBindVertexArray(0);
}

void CTeapot::drawRaw() {
    updateMatrix();
    glBindVertexArray(_vao);
    glUniform1i(_shadingModeLoc, _uShadingMode);
    if (_bObjColor) glUniform4fv(_colorLoc, 1, glm::value_ptr(_color));
    glDrawElements(GL_TRIANGLES, _idxCount, GL_UNSIGNED_INT, 0);
    glBindVertexArray(0);
}

void CTeapot::reset() {
    CShape::reset();
}

void CTeapot::update(float dt) {
    // 可做動畫或自轉
}

// --- 4. 產生 Teapot 幾何：計算頂點、法線、UV，並填入 _points, _idx ---
void CTeapot::generateTeapot(GLuint res, GLuint pattern) {
    const unsigned int patches = 32;
    _vtxCount = patches * (res + 1) * (res + 1);
    _idxCount = patches * res * res * 6;
    _vtxAttrCount = 11; // pos(3) + color(3) + normal(3) + tex(2)

    _points = new GLfloat[_vtxCount * _vtxAttrCount];
    _idx = new GLuint[_idxCount];
    glm::vec4 colorRim, colorBody, colorLid, colorHandle, colorSpout, colorBottom;

    switch (pattern)
    {
    case 1:
        colorRim = glm::vec4(0.10f, 0.30f, 0.10f, 1.0f); // 深松綠
        colorBody = glm::vec4(0.40f, 0.70f, 0.40f, 1.0f); // 草原綠
        colorLid = glm::vec4(0.80f, 0.90f, 0.80f, 1.0f); // 露水白
        colorHandle = glm::vec4(0.25f, 0.50f, 0.25f, 1.0f); // 苔蘚綠
        colorSpout = glm::vec4(0.55f, 0.80f, 0.55f, 1.0f); // 淺綠
        colorBottom = glm::vec4(0.05f, 0.20f, 0.05f, 1.0f); // 暗林綠  

        break;
    case 2: //秋日暖霞
        colorRim = glm::vec4(0.75f, 0.55f, 0.50f, 1.0f); // 柔和紫褐
        colorBody = glm::vec4(0.90f, 0.70f, 0.55f, 1.0f); // 溫暖蜜桃
        colorLid = glm::vec4(1.00f, 0.85f, 0.65f, 1.0f); // 淡奶油黃
        colorHandle = glm::vec4(0.65f, 0.45f, 0.40f, 1.0f); // 古銅褐
        colorSpout = glm::vec4(0.85f, 0.60f, 0.50f, 1.0f); // 珊瑚粉
        colorBottom = glm::vec4(0.50f, 0.35f, 0.30f, 1.0f); // 深木棕  
        break;
    case 3:
        colorRim = glm::vec4(1.00f, 0.88f, 0.70f, 1.0f); // 柔和落日黃
        colorBody = glm::vec4(1.00f, 0.78f, 0.55f, 1.0f); // 暖融蜜桃
        colorLid = glm::vec4(0.95f, 0.65f, 0.45f, 1.0f); // 淡珊瑚橙
        colorHandle = glm::vec4(0.90f, 0.55f, 0.40f, 1.0f); // 溫暖珊瑚
        colorSpout = glm::vec4(0.85f, 0.50f, 0.35f, 1.0f); // 柔和珊瑚紅
        colorBottom = glm::vec4(0.80f, 0.45f, 0.30f, 1.0f); // 暖赤土紅  
        break;
    case 4:
        colorRim = glm::vec4(0.60f, 0.75f, 0.80f, 1.0f); // 霧灰藍
        colorBody = glm::vec4(0.70f, 0.85f, 0.90f, 1.0f); // 淡湖藍
        colorLid = glm::vec4(0.95f, 0.95f, 0.80f, 1.0f); // 柔和奶油
        colorHandle = glm::vec4(0.50f, 0.65f, 0.70f, 1.0f); // 霧青
        colorSpout = glm::vec4(0.75f, 0.90f, 0.85f, 1.0f); // 淡薄荷
        colorBottom = glm::vec4(0.40f, 0.55f, 0.60f, 1.0f); // 深湖藍 
        break;
    default:// 使用預設 1
        colorRim = glm::vec4(0.85f, 0.60f, 0.30f, 1.0f); // 焦糖橙
        colorBody = glm::vec4(0.95f, 0.75f, 0.50f, 1.0f); // 杏仁奶
        colorLid = glm::vec4(1.00f, 0.85f, 0.65f, 1.0f); // 奶油黃
        colorHandle = glm::vec4(0.70f, 0.40f, 0.20f, 1.0f); // 栗子棕
        colorSpout = glm::vec4(0.90f, 0.50f, 0.25f, 1.0f); // 夕陽紅
        colorBottom = glm::vec4(0.60f, 0.30f, 0.15f, 1.0f); // 焦糖棕  
        break;
    }

    // 以下三種顏色，可自行打開一組


    GLuint vi = 0;
    for (unsigned int p = 0; p < patches; ++p) {
        // 根據 patch 編號選擇顏色
        glm::vec4 regionColor;
        if (p < 4) regionColor = colorRim;
        else if (p < 12) regionColor = colorBody;
        else if (p < 16) regionColor = colorLid;
        else if (p < 20) regionColor = colorHandle;
        else if (p < 24) regionColor = colorSpout;
        else              regionColor = colorBottom;

        // 先組出此 patch 的 4×4 控制點
        glm::vec3 P[4][4];
        for (int i = 0; i < 4; ++i)
            for (int j = 0; j < 4; ++j) {
                auto& v = teapotVertices[teapotPatches[p][i][j]];
                P[i][j] = glm::vec3(v[0], v[2], -v[1]);
            }

        // 細分 u, v
        for (unsigned int i = 0; i <= res; ++i) {
            float u = float(i) / res;
            float Bu[4] = { B(0,u), B(1,u), B(2,u), B(3,u) };
            float dBu[4] = { dB(0,u),dB(1,u),dB(2,u),dB(3,u) };
            for (unsigned int j = 0; j <= res; ++j) {
                float v = float(j) / res;
                float Bv[4] = { B(0,v), B(1,v), B(2,v), B(3,v) };
                float dBv[4] = { dB(0,v),dB(1,v),dB(2,v),dB(3,v) };

                // 計算位置與偏導
                glm::vec3 pos(0.0f), du(0.0f), dv(0.0f);
                for (int m = 0; m < 4; ++m)
                    for (int n = 0; n < 4; ++n) {
                        pos += P[m][n] * (Bu[m] * Bv[n]);
                        du += P[m][n] * (dBu[m] * Bv[n]);
                        dv += P[m][n] * (Bu[m] * dBv[n]);
                    }
                glm::vec3 normal = glm::normalize(glm::cross(dv, du));
                glm::vec2 tex(u, v);

                // 填入 _points：pos, regionColor, normal, tex
                _points[vi * _vtxAttrCount + 0] = pos.x;
                _points[vi * _vtxAttrCount + 1] = pos.y;
                _points[vi * _vtxAttrCount + 2] = pos.z;
                _points[vi * _vtxAttrCount + 3] = regionColor.r;
                _points[vi * _vtxAttrCount + 4] = regionColor.g;
                _points[vi * _vtxAttrCount + 5] = regionColor.b;
                _points[vi * _vtxAttrCount + 6] = normal.x;
                _points[vi * _vtxAttrCount + 7] = normal.y;
                _points[vi * _vtxAttrCount + 8] = normal.z;
                _points[vi * _vtxAttrCount + 9] = tex.x;
                _points[vi * _vtxAttrCount + 10] = tex.y;
                ++vi;
            }
        }
    }

    // 填索引
    GLuint ii = 0;
    for (unsigned int p = 0; p < patches; ++p) {
        GLuint base = p * (res + 1) * (res + 1);
        for (unsigned int i = 0; i < res; ++i) {
            for (unsigned int j = 0; j < res; ++j) {
                GLuint a = base + i * (res + 1) + j;
                GLuint b = a + (res + 1);
                // 三角形 1
                _idx[ii++] = a;
                _idx[ii++] = b;
                _idx[ii++] = a + 1;
                // 三角形 2
                _idx[ii++] = a + 1;
                _idx[ii++] = b;
                _idx[ii++] = b + 1;
            }
        }
    }

}